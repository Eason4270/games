<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Tic-Tac-Toe Game</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      display: flex;
      justify-content: center;
      align-items: center;
      height: 100vh;
      margin: 0;
      background-color: #f4f4f4;
    }
    .game-container {
      text-align: center;
    }
    .board {
      display: grid;
      grid-template-columns: repeat(3, 100px);
      grid-template-rows: repeat(3, 100px);
      gap: 5px;
      margin-bottom: 20px;
    }
    .cell {
      width: 100px;
      height: 100px;
      display: flex;
      justify-content: center;
      align-items: center;
      font-size: 2em;
      background-color: #fff;
      border: 2px solid #333;
      cursor: pointer;
    }
    .cell.taken {
      cursor: not-allowed;
    }
    .winner-message {
      font-size: 1.5em;
      margin-top: 10px;
      color: green;
    }
    .reset-btn {
      padding: 10px 20px;
      font-size: 1em;
      cursor: pointer;
      border: none;
      background-color: #4CAF50;
      color: white;
      border-radius: 5px;
    }
    .reset-btn:hover {
      background-color: #45a049;
    }
  </style>
</head>
<body>
  <div class="game-container">
    <h1>Tic-Tac-Toe</h1>
    <div class="board">
      <div class="cell" data-index="0"></div>
      <div class="cell" data-index="1"></div>
      <div class="cell" data-index="2"></div>
      <div class="cell" data-index="3"></div>
      <div class="cell" data-index="4"></div>
      <div class="cell" data-index="5"></div>
      <div class="cell" data-index="6"></div>
      <div class="cell" data-index="7"></div>
      <div class="cell" data-index="8"></div>
    </div>
    <div class="winner-message"></div>
    <button class="reset-btn">Restart</button>
  </div>

  <script>
    const board = document.querySelector('.board');
    const cells = document.querySelectorAll('.cell');
    const winnerMessage = document.querySelector('.winner-message');
    const resetButton = document.querySelector('.reset-btn');

    let currentPlayer = 'X'; // 'X' starts the game
    let gameActive = true;
    let boardState = ['', '', '', '', '', '', '', '', ''];

    const winningCombinations = [
      [0, 1, 2],
      [3, 4, 5],
      [6, 7, 8],
      [0, 3, 6],
      [1, 4, 7],
      [2, 5, 8],
      [0, 4, 8],
      [2, 4, 6]
    ];

    // Start a new game
    function startNewGame() {
      boardState = ['', '', '', '', '', '', '', '', ''];
      gameActive = true;
      currentPlayer = 'X';
      winnerMessage.textContent = '';
      cells.forEach(cell => {
        cell.textContent = '';
        cell.classList.remove('taken');
      });
    }

    // Check if a player has won
    function checkWinner() {
      for (const combination of winningCombinations) {
        const [a, b, c] = combination;
        if (boardState[a] && boardState[a] === boardState[b] && boardState[a] === boardState[c]) {
          return boardState[a];
        }
      }
      return null;
    }

    // Handle cell click
    function handleCellClick(event) {
      const index = event.target.getAttribute('data-index');
      if (boardState[index] || !gameActive) return;

      boardState[index] = currentPlayer;
      event.target.textContent = currentPlayer;
      event.target.classList.add('taken');

      const winner = checkWinner();
      if (winner) {
        winnerMessage.textContent = `Player ${winner} wins!`;
        gameActive = false;
      } else if (!boardState.includes('')) {
        winnerMessage.textContent = 'It\'s a draw!';
        gameActive = false;
      } else {
        currentPlayer = currentPlayer === 'X' ? 'O' : 'X';
      }
    }

    // Reset game when clicking "Restart"
    resetButton.addEventListener('click', startNewGame);

    // Add event listener for each cell
    cells.forEach(cell => {
      cell.addEventListener('click', handleCellClick);
    });

    // Start the game
    startNewGame();
  </script>
</body>
</html>
